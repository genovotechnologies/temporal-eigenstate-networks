[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "temporal-eigenstate-networks"
dynamic = ["version"]
description = "Temporal Eigenstate Networks: Linear-Complexity Sequence Modeling via Spectral Decomposition"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Proprietary"}
authors = [
    {name = "Oluwatosin Afolabi", email = "afolabi@genovotech.com"}
]
keywords = [
    "deep-learning",
    "transformers",
    "attention",
    "sequence-modeling",
    "eigenstate",
    "neural-networks",
    "spectral-decomposition"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
full = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "scipy>=1.10.0",
    "tqdm>=4.65.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/genovotechnologies/temporal-eigenstate-networks"
Documentation = "https://github.com/genovotechnologies/temporal-eigenstate-networks#readme"
Repository = "https://github.com/genovotechnologies/temporal-eigenstate-networks"
"Bug Tracker" = "https://github.com/genovotechnologies/temporal-eigenstate-networks/issues"

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "examples*", "scripts*", "paper*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.eggs
  | \.tox
  | build
  | dist
  | paper
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers --cov=src --cov-report=term-missing"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "examples/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
